{
  "id": 103,
  "header": "html5checklist",
  "topicList": [
    "13. \"Плохо\"/\"Хорошо\"",
    "Важные мелочи"
  ],
  "itemGroups": [
    {
      "topic": "13. \"Плохо\"/\"Хорошо\"",
      "items": [
        {
          "title": "<p>Важно понимать что семантика — может быть не только в используемых элементах, но и в именах классов. И БЭМ-иерархия классов — это новый уровень семантики.</p><p><b>Плохо:</b></p><ul><li><strong>Самое страшное, к счастью уже редкое — <code>float: left</code> для всех блоков.</strong> Безумный верстальщик эмулирует привычные ячейки таблиц, расставляя блоки как кирпичи друг за другом. Вон из профеcсии!<br/>\nПроверяется в extension для браузеров <strong>Web Developer</strong> → Outline → Outline Floated Elements, если всё в красных блоках, вёрстку нужно выкидывать на помойку. <br/>\nТак же, такая верстка получается при создании сайтов на <strong>Adobe Muse</strong>. <br/>\n<strong>Примеры</strong>: <a href=\"http://www.cardiganium.ru/\" target=\"_blank\">один</a> - <a href=\"http://www.zebraproject.ru/\" target=\"_blank\">два</a> - <a href=\"http://www.jurist-kavykina.ru/\" target=\"_blank\">три</a>"
        },
        {
          "title": "Отступы между блоками на сайте должны быть за счёт margin у блоков, а не выпирающих наружу margin у содержимого блоков."
        },
        {
          "title": "Плохо — отсутствие тайтлов."
        },
        {
          "title": "Плохо — отсутствие alt у картинок."
        },
        {
          "title": "Плохо — хаки для браузеров внутри main.css (как без фильтров, так и с ними). Без фильтров — это когда когда просто пишем <code>{zoom: 1;}</code> — это оч. плохо, т.к. будет применяться ко всем IE, а не только к тому, в котором проблема. С фильтрами — когда пишут <code>(* html, *+html и т.д.)</code> — плохо, потому что это засоряет код, делает его менее читабельным, а какие-то хаки могут быть и вообще невалидными и нарушать прогон CSSLint. Conditional Comments — тоже плохо, хотя раньше считалось хорошей техникой, плохо т.к. это увеличение кол-ва css-файлов и главное — это разнесение кода в разные места. Сейчас рекомендуется использовать специальные классы типа <code>html.ie7, html.ie8,…</code> (из HTML5 Boilerplate), Modernizer-детектирование фич (классы вида <code>html.js.flexbox.canvas.no-touch…</code>) и JS-детектирование браузера и платфорым (например CSS Browser Selector генерирующий классы вида <code>html.webkit.chrome.chrome25.win.win8…</code>)"
        },
        {
          "title": "Плохо — не проверять tabindex в формах."
        },
        {
          "title": "Плохо — писать стили не думая о логике размещения элементов. Например, если элемент всегда находится сверху, у него должен быть большой z-index, нельзя надеяться на то что сейчас всё нормально смотрится — стили должны быть железобетонными. Если элемент всегда должен находится на каком-то месте, в независимости от окружающих его элементов — это position: absolute; а не float и т.д.\nБлоки независящие друг от друга не должны быть внутри одного блока (например телефон компании и поиск по сайту). Блоки независящие по расположению друг от друга должны быть position absolute, а не float’ится."
        },
        {
          "title": "Очень плохо — презентационные классы (right, red)."
        },
        {
          "title": "Нежелательно когда вёрстка содержит пустые блоки для презентационных целей, для этого существуют псевдоэлементы"
        },
        {
          "title": "Плохо когда нет базовых стилей у стандартных элементов. Т.е. просто h1,h2,ul,table,etc без классов должны смотреться красиво и органично. Проще говоря — используйте Normalize, a не Reset CSS."
        },
        {
          "title": "Плохо когда нет постепенного уточнения стилей для текста, когда стиль выписывается для каждого элемента отдельно, а за его пределами — внешний вид может быть кардинально другой. Речь о ситуации когда например текст, написанный без абзацев, имеет вообще не тот стиль что у всех элементов в блоке. Надо вести стили снизу вверх, постепенно уточняя их. Тут важно не путать стили для текста и стили для блоков. Для текста — каскад это добро, для блоков сайта — нужно использовать БЭМ."
        },
        {
          "title": "Ещё хуже — чересчур детализированные глобальные стили. Например <code>a {font: italic 10px Tahoma;}</code> /* Ненависть! Ненависть! НЕНАВИСТЬ!!11 */ Потом приходится переопределять стиль ссылок для каждого блока."
        },
        {
          "title": "Размеры и позиционирование элемента должны указываться в одних единицах измерения. Т.е. высота/ширина блока в px и margin/padding в em — это странно и скорей всего ошибка. Line-height — лучше задавать коэффициентом (1/1.2/1.4... т.е. без указания единицы измерения — это цифра на которую умножается font-size и получится межстрочный интервал). Если задали font-size/height в em — значит задаём и margin/padding тоже в em. Классический пример: список dl-dt-dd, где dt и dd ставятся друг на против друга с помощью подтягивания dd отрицательным margin вверх. Или — выделили padding’ом место под position: absolute какого-то текстового блока. У текстовых элементов (абзацей, ячеек таблиц) задаём padding и height в em (чтоб корректно увеличивать размер шрифта) ."
        },
        {
          "title": "<s>Плохо</s>(недопустимо!) вешать стили на селекторы вложенных стандартных тэгов, без классов. Т.е. допустим пишем что-то типа <code>h2 a span {какая-то крепкая штука, типа картинки с графикой, что закрывает текст в заголовке}</code>, а потом клиент в визиге внезапно вбивает такое сочетание! И получаем невероятный баг. На просто одиночные теги для вывода текста из БД — можно, но используя блок .b-text (смотри BEM CSS)."
        },
        {
          "title": "Плохо — напрямую задавать визуальное отображение элементов через js: <code>$('.element').css(color,\"#f00\")</code>. Это должно делаться через установку/смену классов.</li></ul><p><b>Хорошо:</b></p><ul><li><strong><a href=\"http://getbem.com/\">БЭМ</a></strong>! Важно понимать что это методология, а не инструменты. Для обычных сайтов достаточно вёрстки по <a href=\"http://delka.github.io/talks/webcamp/2015/bem/\">BEM CSS</a>, без использования библиотеки блоков и bem-tools. <a href=\"http://delka.name/blog/2013/04/bem-otkroveniya-prinyavshih-veru/\">Я долго считал что «BEM — это классная идея, но это чересчур, так категорично не надо, надо чуть по-другому, под себя...»</a>, так вот — это неверно! Нужно обязательно уходить от каскада, а БЭМ — это один из отличных вариантов решения."
        },
        {
          "title": "Хорошо — структурировать код в блоки описывающие логику документа. Т.е. создавать div даже там, где он для презентационных целей не нужен. И наоборот — стараться не ставить лишний div там, где структура этого не требует, а это нужно лишь для визуальных эффектов."
        },
        {
          "title": "<strong><a href=\"http://html5boilerplate.com\">HTML5 Boilerplate</a></strong> — замечательный стартовый шаблон от «отцов». Используйте и присоединяйтесь к разработке, добавляйте свои велосипеды туда! \nРаньше у нас был свой самописный framework-стартовый html, теперь используем Boilerplate как основу, а в него уже добавляем старые наработки."
        },
        {
          "title": "Используйте наработанные решения, чужие модули, jQuery-плагины, не изобретайте велосипедов, а если изобретаете — поддерживайте их, ведите библиотеку кода (после каждого нового проекта добавляйте туда код, обновляйте старый)."
        },
        {
          "title": "Для текстовых блоков, что редактируются в админке, должна обеспечиваться атомарность текстовых стилей. Т.е. есть у нас страничка с каким-то текстовым блоком, примерно такой структуры:\n```css\n.content-text h1\n.content-text .entry\n.content-text .entry .somenamedblock\n```\nТо .somenamedblock должен получать текстовые стили непосредственно — <code>.somenamedblock {font: …; color: …;}</code>, т.к. иначе в визиге админки мы не сможем их застайлить."
        },
        {
          "title": "одинаковый html-код для блоков на морде и внутряках, с идентичным контентом, но разным визуальным представлением данных. Реализуется через модификаторы блоков и элементов, но не через модификацию от родителя (каскад от body.pagename например!)</li></ul>"
        }
      ]
    },
    {
      "topic": "Важные мелочи",
      "items": [
        {
          "title": "<ul><li>Лого на внутряках должно вести на титулку. На титулке logo = h1, на внутряках H1=заголовок контента, а Logo=div"
        },
        {
          "title": "У каждой страницы должен быть свой уникальный TITLE формата <code>About Us — %CompanyName%</code>"
        },
        {
          "title": "Все страницы должны быть слинкованы и <a href=\"http://home.snafu.de/tilman/xenulink.html\">проверены на наличие битых ссылок</a>."
        },
        {
          "title": "Все ссылки должны как-то реагировать на :hover, :active и :focus — показыванием/убиранием подчёркивания, сменой цвета, чем угодно. У всех ссылок, кроме пунктов меню, должна быть реакция на :visited"
        },
        {
          "title": "Проверять что все интерактивные элементы страницы что должны работать — работают."
        },
        {
          "title": "«Контент в начале страницы» — содержимое страницы должно идти в начале кода, до всяких сайдбаров и прочего."
        },
        {
          "title": "Все созданные странички изначально должны быть порезаны на шаблоны, чтоб программеру было легче их интегрировать."
        },
        {
          "title": "<a href=\"http://habrahabr.ru/blogs/typography/23812/\">Копирайт должен быть написан правильно</a>."
        },
        {
          "title": "Должны быть favicon.ico (желательно с включенными внутрь неё 32×32, 48×48 и 64×64 вариациями) и apple-touch-icon"
        },
        {
          "title": "В вёрстке не должны оставаться закомментированные «на всякий случай» куски кода, лишние неиспользуемые файлы, старые версии файлов и т.п. Все бекапы можно вытянуть из системы контроля версий (например Git или SVN), а на живом проекте «мусор» потом мешает разобраться как что работает."
        },
        {
          "title": "Размеры для блоков, чьи размеры зависят от содержащегося в них текста, нужно задавать в em, а не px."
        },
        {
          "title": "Если url ссылки неизвестен, то он должен быть равен её анкору, написанному латиницей с заменой пробелов/спецсимволов на тире."
        },
        {
          "title": "Skype-плагин не должен ломать вёрстку"
        },
        {
          "title": "Ресайз textarea не должен ломать вёрстку"
        },
        {
          "title": "При проверке frontend в целом — 404-страница должна отдаваться с кодом 404 а не 200."
        },
        {
          "title": "Нужно подстраховываться фиксируя в css размеры картинок, выводящихся программно."
        },
        {
          "title": "Проверка орфографии Word’ом или <a href=\"http://www.artlebedev.ru/tools/orfograf/\">Орфографом</a>, желательно — <a href=\"http://www.artlebedev.ru/tools/typograf/\">оттипографить</a> контент."
        },
        {
          "title": "Ссылки на чужие сайты должны быть с <code>target=\"_blank\"</code>, желательно выделять их иконкой «внешняя ссылка»."
        },
        {
          "title": "Разумеется картинки должны быть в отдельной папке, css — в отдельной и js — в отдельной. Графика, не являющаяся частью дизайна (всякие илююстрации, фото в новостях и т.д.) — нужно положить в отдельную папку, например userfiles."
        },
        {
          "title": "Изображения должны масштабироваться в зависимости от размера окна <code>(max-width:100%; height:auto;)</code>"
        }
      ]
    }
  ]
}