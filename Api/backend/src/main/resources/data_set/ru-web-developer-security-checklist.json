{
  "id": 178,
  "header": "ru-web-developer-security-checklist",
  "topicList": [
    "База данных",
    "Разработка",
    "Аутентификация",
    "Защита от DOS-атак (Denial of Service)",
    "Веб-трафик",
    "API",
    "Валидация",
    "Облачная конфигурация",
    "Инфраструктура",
    "Функционирование",
    "Тестирование",
    "И, наконец, планирование"
  ],
  "itemGroups": [
    {
      "topic": "База данных",
      "items": [
        {
          "title": "<p>Используйте шифрование конфиденциальных данных и данных, идентифицирующих пользователей, например токенов доступа, адресов электронной почты или деталей счетов.</p><p>Если ваша база данных поддерживает экономичное шифрование в неактивном режиме (вроде AWS Aurora), включите его для защиты данных на диске. Убедитесь, что все резервные копии хранятся в зашифрованном виде.</p><p>Используйте минимальные привилегии для использования аккаунта пользователя базой данных. Не используйте корневую учётную запись базы данных. </p><p>Храните и группируйте секретные данные, используя хранилище ключей, например Vault или AWS Secret Manager. Не используйте жёстко закодированные секретные данные в своих приложениях и НИКОГДА не загружайте такие данные в репозиторий!</p><p>Полностью избавьтесь от SQL-атак, используя только подготовленные SQL-инструкции. Например, если вы работаете с NPM, пользуйтесь не npm-mysql, а npm-mysql2, который поддерживает подготовленные инструкции.</p>"
        }
      ]
    },
    {
      "topic": "Разработка",
      "items": [
        {
          "title": "<p>Проверьте, что все компоненты вашего софта протестированы на наличие уязвимостей для каждой версии, отправленной в продакшен. Сюда входят продукты с открытым исходным кодом, библиотеки и пакеты. Желательно автоматизировать это через CI-CD процесс.</p><p>Относитесь к безопасности систем разработки приложений так же бдительно, как к безопасности систем в продакшене. Создавайте софт из защищённых, изолированных систем.</p><p>Убедитесь, что в продакшене не попадают служебные/отладочные файлы и скрипты.</p>"
        }
      ]
    },
    {
      "topic": "Аутентификация",
      "items": [
        {
          "title": "<p>Убедитесь, что все пароли хешируются с использованием соответствующего алгоритма, вроде bcrypt. Никогда не реализуйте собственное шифрование и корректно инициализируйте шифрование из случайных данных.</p><p>Реализуйте простые, но адекватные правила создания паролей, которые побуждают пользователей придумывать длинные случайные пароли.</p><p>Используйте многофакторную аутентификацию для всех своих провайдеров.</p>"
        }
      ]
    },
    {
      "topic": "Защита от DOS-атак (Denial of Service)",
      "items": [
        {
          "title": "<p>Проверяйте, что DOS-атаки на API не вредят вашему сайту. Как минимум используйте ограничители скорости на более медленных методах API в таких типичных функциях, как вход и генерация токена.</p><p>Создайте лимиты для размеров и структуры запросов для данных, предоставляемых пользователями.</p><p>Снизьте риск хакерской атаки, минимизировав последствия DDoS-атаки (Distributed Denial of Service), используйте для этого глобальный кеширующий прокси-сервер вроде CloudFlare. Его можно включить при активной DDoS-атаке, а в остальных случаях использовать лишь для DNS.</p>"
        }
      ]
    },
    {
      "topic": "Веб-трафик",
      "items": [
        {
          "title": "<p>Используйте TLS для всего сайта, а не только для формы входа и ответов сервера. Никогда не используйте TLS только для формы входа.</p><p>Файлы cookie должны быть с флагом httpOnly, защищены и находиться в области видимости пути и домена.</p><p>Используйте <a href=\"https://en.wikipedia.org/wiki/Content_Security_Policy\">CSP</a>, не допуская небезопасные бэкдоры. Настраивается это через боль, но оно того стоит.</p><p>Используйте заголовки X-Frame-Option и X-XSS-Protection в ответах клиентам.</p><p>Используйте HSTS-ответы, чтобы форсировать доступ только через TLS. Для подстраховки перенаправляйте на сервере все HTTP-запросы на HTTPS.</p><p>Используйте CSRF-токены во всех формах и используйте новый заголовок ответа <a href=\"https://scotthelme.co.uk/csrf-is-dead/\">SameSite Cookie</a>, который раз и навсегда исправляет CSRF для всех новых браузеров.</p>"
        }
      ]
    },
    {
      "topic": "API",
      "items": [
        {
          "title": "<p>Проверьте, что в открытых API нет ресурсов с последовательными численными идентификаторами.</p><p>Проверьте, что пользователи полноценно аутентифицированы и авторизованы, когда используют ваши API.</p><p>Используйте канареечные проверки в API, чтобы обнаруживать незаконные или аномальные запросы, которые указывают на атаку.</p>"
        }
      ]
    },
    {
      "topic": "Валидация",
      "items": [
        {
          "title": "<p>Валидируйте информацию на клиенте, чтобы пользователь получал быструю обратную связь, но всегда делайте повторную валидацию на бэкенде.</p><p>Валидируйте любую (без исключения) информацию на сервере, вводимую пользователем, используя белые списки. Никогда напрямую не вставляйте данные, полученные от пользователя в ответы. Никогда не используйте вводимую пользователем информацию в SQL-инструкциях.</p>"
        }
      ]
    },
    {
      "topic": "Облачная конфигурация",
      "items": [
        {
          "title": "<p>Проверьте, что у всех служб открыто минимальное количество портов. Хоть безопасность через неясность — это не защита, использование нестандартных портов усложнит задачу взломщикам.</p><p>Храните бэкенд-базу данных и сервисы в приватных VPC (виртуальном частном облаке), которые не видны ни в какой открытой сети. Будьте очень осторожными, когда настраиваете группы безопасности AWS (Амазон) и пирингуете VPC, что может случайно превратить сервисы в открытые.</p><p>Изолируйте логические службы в отдельные VPC и одноранговые VPC для межсервисной связи.</p><p>Проверьте, что все службы принимают данные с минимального набора IP-адресов.</p><p>Ограничьте исходящий IP-трафик и трафик портов для минимизации APT (Advanced Persistent Threat) и бот-атак.</p><p>Всегда используйте AWS IAM (Identity and Access Management) пользователей и роли, а не учётные данные корневого каталога. Изучите, как эффективней пользоваться IAM.</p><p>Используйте минимальную привилегию доступа для всех сотрудников и разработчиков. Давайте IAM пользователям и ролям минимальные возможности, необходимые для выполнения задачи.</p><p>Регулярно чередуйте пароли и ключи доступа\u0010, используйте расписание.</p>"
        }
      ]
    },
    {
      "topic": "Инфраструктура",
      "items": [
        {
          "title": "<p>Удостоверьтесь, что можете делать обновления без простоя. Убедитесь, что можете быстро обновлять приложения целиком автоматически.</p><p>Стройте всю инфраструктуру с помощью инструмента, подобного Terraform, а не через облачную консоль. Инфраструктура должна определяться как «код» и воссоздаваться одним нажатием кнопки. Возьмите за правило никогда не создавать ничего в облаке вручную — Terraform может проверить вашу конфигурацию.</p><p>Используйте централизованную систему логирования для всех сервисов. Вам никогда не должен понадобиться SSH для доступа к логам.</p><p>Не подключайтесь по SSH к сервисам, кроме случаев, когда необходима единоразовая диагностика. Регулярное использование SSH чаще всего означает, что вы не автоматизировали важную задачу.</p><p>Не оставляйте порт 22 постоянно открытым в любых группах служб AWS.</p><p>Создавайте <a href=\"http://chadfowler.com/2013/06/23/immutable-deployments.html\">неизменяемые хосты</a>, вместо серверов с длительным сроком службы, которые нужно модифицировать и обновлять. (см. <a href=\"https://www.powerdown.io/blog/posts/immutable-infrastructure-can-be-dramatically-more-secure.html\">Immutable Infrastructure Can Be More Secure</a>).</p><p>Используйте систему обнаружения вторжений (Intrusion Detection System) для минимизации APT.</p>"
        }
      ]
    },
    {
      "topic": "Функционирование",
      "items": [
        {
          "title": "<p>Выключайте неиспользуемые сервисы и серверы. Самый безопасный сервер — отключенный сервер. С помощью инструментов вроде PowerDown такому процессу можно задать расписание. </p>"
        }
      ]
    },
    {
      "topic": "Тестирование",
      "items": [
        {
          "title": "<p>Регулярно проверяйте свой дизайн и реализацию.</p><p>Проведите испытание на взлом (penetration testing) — хакните себя, и попросите кого-нибудь хакнуть вас.</p>"
        }
      ]
    },
    {
      "topic": "И, наконец, планирование",
      "items": [
        {
          "title": "<p>У вас должна быть модель угрозы, описывающая от чего вы защищаетесь. В ней список и приоритеты возможных угроз и злоумышленников.</p><p>Держите опробованный на деле план на случай нарушения безопасности. Однажды он вам понадобится.</p>"
        }
      ]
    }
  ],
  "sourceUrl": "https://example.com"
}