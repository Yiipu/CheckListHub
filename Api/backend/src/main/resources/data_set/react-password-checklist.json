{
  "id": 171,
  "header": "react-password-checklist",
  "topicList": [
    "Example",
    "Install in your project",
    "Example Usage",
    "Available Rules",
    "Props",
    "Available Classes",
    "Contributing",
    "Run Locally"
  ],
  "itemGroups": [
    {
      "topic": "Example",
      "items": [
        {
          "title": "<p><img alt=\"React Password Checklist Demo\" src=\"demo/demo.gif\"/></p>"
        }
      ]
    },
    {
      "topic": "Install in your project",
      "items": [
        {
          "title": "<p><code>npm install --save react-password-checklist</code></p><p><code>yarn add react-password-checklist</code></p><p><em>Note: react is a peer dependency. You should be using this in a React project.</em></p>"
        }
      ]
    },
    {
      "topic": "Example Usage",
      "items": [
        {
          "title": "<p>```\nimport React, {useState} from \"react\"\nimport PasswordChecklist from \"react-password-checklist\"</p><p>const SignUp = () =&gt; {\n    const [password, setPassword] = useState(\"\")\n    const [passwordAgain, setPasswordAgain] = useState(\"\")\n    return (\n        <form>\n<label>Password:</label>\n<input ==\"\" onchange=\"{e\" type=\"password\"/> setPassword(e.target.value)}&gt;\n            <label>Password Again:</label>\n<input ==\"\" onchange=\"{e\" type=\"password\"/> setPasswordAgain(e.target.value)}&gt;</form></p><pre><code>        &lt;PasswordChecklist\n            rules={[\"minLength\",\"specialChar\",\"number\",\"capital\",\"match\"]}\n            minLength={5}\n            value={password}\n            valueAgain={passwordAgain}\n            onChange={(isValid) =&gt; {}}\n        /&gt;\n    &lt;/form&gt;\n)\n</code></pre><p>}\n```</p>"
        },
        {
          "topic": "Custom Messages/Translations",
          "items": [
            {
              "title": "<p>```\nimport React, {useState} from \"react\"\nimport PasswordChecklist from \"react-password-checklist\"</p><p>const SignUp = () =&gt; {\n    const [password, setPassword] = useState(\"\")\n    const [passwordAgain, setPasswordAgain] = useState(\"\")\n    return (\n        <form>\n<label>Password:</label>\n<input ==\"\" onchange=\"{e\" type=\"password\"/> setPassword(e.target.value)}&gt;\n            <label>Password Again:</label>\n<input ==\"\" onchange=\"{e\" type=\"password\"/> setPasswordAgain(e.target.value)}&gt;</form></p><pre><code>        &lt;PasswordChecklist\n            rules={[\"minLength\",\"specialChar\",\"number\",\"capital\",\"match\"]}\n            minLength={8}\n            value={password}\n            valueAgain={passwordAgain}\n            messages={{\n                minLength: \"La contrase√±a tiene m√°s de 8 caracteres.\",\n                specialChar: \"La contrase√±a tiene caracteres especiales.\",\n                number: \"La contrase√±a tiene un n√∫mero.\",\n                capital: \"La contrase√±a tiene una letra may√∫scula.\",\n                match: \"Las contrase√±as coinciden.\",\n            }}\n        /&gt;\n    &lt;/form&gt;\n)\n</code></pre><p>}\n```</p>"
            }
          ]
        }
      ]
    },
    {
      "topic": "Available Rules",
      "items": [
        {
          "title": "<p>Customize the component to display only the rules you need in the desired order you wish to display them.</p>"
        }
      ]
    },
    {
      "topic": "Props",
      "items": [
        {
          "title": "<p>| Prop              | Description                                                                                                                                                                                                                               | Type     | Required                        | Default                                                       |\n| ----------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------- | ------------------------------- | ------------------------------------------------------------- |\n| rules             | Rules to display in the order desired.<br/>Options are <code>minLength</code>, <code>maxLength</code>, <code>specialChar</code>,<br/><code>number</code>, <code>letter</code>, <code>capital</code>, <code>match</code>, <br/><code>lowercase</code>, <code>notEmpty</code>                                                               | array    | yes                             |\n| value             | Current potential password                                                                                                                                                                                                                | string   | yes                             |\n| valueAgain        | Current potential password confirmation                                                                                                                                                                                                   | string   | Only with<br/><code>match</code> rule     |\n| minLength         | Minimum Password Length                                                                                                                                                                                                                   | number   | Only with<br/><code>minLength</code> rule |\n| maxLength         | Maximum Password Length                                                                                                                                                                                                                   | number   | Only with<br/><code>maxLength</code> rule |\n| specialCharsRegex | Regular expression to be used to validate the specialChars rule                                                                                                                                                                           | RegExp   |                                 | <code>/[~`¬ø¬°!#$%\\^&amp;*‚Ç¨¬£@+√∑=\\-\\[\\]\\\\';,/{}\\(\\)\\|\\\\\":&lt;&gt;\\?\\.\\_]/g</code> |\n| onChange          | Callback that is triggered when the<br/>password becomes valid or invalid across<br/>all rules.                                                                                                                                         | function |                                 | <code>(isValid: boolean, failedRules: string[]) =&gt; {}</code>             |\n| messages          | Object with keys as rules, and values as strings to use as the message to be displayed                                                                                                                                                    | object   |                                 |\n| className         | Class applied to the entire component                                                                                                                                                                                                     | string   |                                 |\n| rtl               | apply rtl styles                                                                                                                                                                                                                          | boolean  |                                 | false                                                         |\n| hideIcon          | Remove the SVG icon element                                                                                                                                                                                                               | boolean  |                                 | false                                                         |\n| style             | Inline styles applied to the<br/>outer component wrapper                                                                                                                                                                                 | object   |                                 |\n| iconSize          | Size of ‚úî or êÑÇ icon                                                                                                                                                                                                                       | number   |                                 | <code>18</code>                                                          |\n| validTextColor    | Color of valid text                                                                                                                                                                                                                       | string   |                                 | Inherited color                                               |\n| invalidTextColor  | Color of invalid text                                                                                                                                                                                                                     | string   |                                 | Inherited color opacity 0.5                                   |\n| validColor        | Color of checkmark icon. Not used with custom <code>iconComponents</code>                                                                                                                                                                            | string   |                                 | <code>#4BCA81</code>                                                     |\n| invalidColor      | Color of X icon. Not used with custom <code>iconComponents</code>                                                                                                                                                                                    | string   |                                 | <code>#FF0033</code>                                                     |\n| iconComponents    | Optional object containing keys of <code>ValidIcon</code> and <code>InvalidIcon</code> with a React Node to be displayed in place of icon. Both icons required if used. Example: <code>{ValidIcon: &lt;img src=\"valid.png\" /&gt;, InvalidIcon: &lt;img src=\"invalid.png\" /&gt;}</code> | object   |                                 |                                                               |</p>"
        }
      ]
    },
    {
      "topic": "Available Classes",
      "items": [
        {
          "title": "<code>.valid</code> - Valid Message"
        },
        {
          "title": "<code>.invalid</code> - Invalid Message"
        }
      ]
    },
    {
      "topic": "Contributing",
      "items": [
        {
          "title": "<p>PRs are welcome for additional functionality! See the Run Locally section below. Pull requests should include unit tests and potentially storybook stories to cover the updates. Thanks!</p>"
        }
      ]
    },
    {
      "topic": "Run Locally",
      "items": [
        {
          "title": "<p><code>yarn</code> to install dependencies.</p><p><code>yarn storybook</code></p>"
        }
      ]
    }
  ],
  "sourceUrl": "https://example.com"
}