{
  "id": 133,
  "header": "new-project-checklist",
  "topicList": [
    "English",
    "中文（Chinese）",
    "License"
  ],
  "itemGroups": [
    {
      "topic": "English",
      "items": [
        {
          "title": "<p>Focus on four dimensions:</p>"
        },
        {
          "title": "[ ] Process, focusing on processes from permissions management, code acquisition, deployment, and code integration."
        },
        {
          "title": "[ ] People, connecting stakeholders, third-party partners (out-of-organization), collaborative teams (within the organization), team members, and more."
        },
        {
          "title": "[ ] Tech, including technical vision, documentation (documents), project code, technology stack, software library management, etc."
        },
        {
          "title": "[ ] Business, covering the requirements of business features such as business vision, business needs, and cross-functional requirements."
        },
        {
          "topic": "Tech",
          "items": [
            {
              "title": "<p><strong>0. Technology Vision</strong></p><p>Description: In terms of technology, what are we pursuing?</p><p><strong>1.Documentation</strong></p>"
            },
            {
              "title": "[ ] Path to Production"
            },
            {
              "title": "[ ] golive and release diary"
            },
            {
              "title": "[ ] other wikis and documentation"
            },
            {
              "title": "[ ] Development specification</li>\n</ul><p>Description: a good documentation should be versionable.</p><p><strong>2.Architecture</strong></p>"
            },
            {
              "title": "[ ] system architecture diagram, such as C4Model mode"
            },
            {
              "title": "[ ] existing technology stacks and their relationships</li>\n</ul><p><strong>3.Code base</strong></p>"
            },
            {
              "title": "[ ] setup guide.Which is <code>README</code>"
            },
            {
              "title": "[ ] architecture decision record. in <code>docs/ard</code> directory."
            },
            {
              "title": "[ ] editor configuration and code style specification"
            },
            {
              "title": "[ ] mode and style guide"
            },
            {
              "title": "[ ] version manager branch pattern. GitFlow or Feature Branch of Master Flow."
            },
            {
              "title": "[ ] commit message style. open source library style or business style</li>\n</ul><p><strong>4.Security</strong></p>"
            },
            {
              "title": "[ ] test strategy.test layered, test pyramid."
            },
            {
              "title": "[ ] test automation. </li>\n</ul><p><strong>5.Project Evolution</strong></p>"
            },
            {
              "title": "[ ] Technical risk.Need to spike before project start."
            },
            {
              "title": "[ ] future technology stack"
            },
            {
              "title": "[ ] system evolution plan</li>\n</ul><p><strong>6. Security</strong></p>"
            },
            {
              "title": "[ ] security standard. Is safety more important, or is the experience more important?"
            },
            {
              "title": "[ ] data encrypt in the code."
            },
            {
              "title": "[ ] code security.</li>\n</ul><p><strong>7. Quality</strong></p>"
            },
            {
              "title": "[ ] project quality tracking."
            },
            {
              "title": "[ ] visualization of code quality."
            },
            {
              "title": "[ ] quality strategy."
            }
          ]
        },
        {
          "topic": "Process",
          "items": [
            {
              "title": "<p><strong>0. Project Process</strong></p>"
            },
            {
              "title": "[ ] Project's Roadmap? Such as project deadline, milestone, plan (with interation plan)."
            },
            {
              "title": "[ ] features's lifecycle. Such as Story card workflow in agile"
            },
            {
              "title": "[ ] How to communicate? Such as IM, Email and agile daily standup, remote meeting, Retro, etc.</li>\n</ul><p><strong>1.Path to Development</strong></p>"
            },
            {
              "title": "[ ] development machine and network permission preparation and so on"
            },
            {
              "title": "[ ] code repositroy permission management"
            },
            {
              "title": "[ ] editor and related tool application setup</li>\n</ul><p>Note: different organizations have their own special situations, such as the opening of PC ports, network permissions, codebase permissions, etc., which require a certain process.</p><p><strong>2.Path to Production</strong></p>"
            },
            {
              "title": "[ ] the process of golive's every step"
            },
            {
              "title": "[ ] related key people"
            },
            {
              "title": "[ ] the tools needed for each step"
            },
            {
              "title": "[ ] the process required for each step. such as quality assurance people &amp; process, and golive process<p>Note: Path to Production in the code is just a description - [ ] for developers, and here's a more detailed explanation.</p><p><strong>3.Path to Roll Off</strong>\n \nNote: What do you need when you change a project?</p>"
            }
          ]
        },
        {
          "topic": "People",
          "items": [
            {
              "title": "<p><strong>1.Teammate</strong></p>"
            },
            {
              "title": "[ ] Who are you looking for each problem?"
            },
            {
              "title": "[ ] Team members' technical stack and level"
            },
            {
              "title": "[ ] How to bring everyone's skill level: Coach, Pairing, Teach"
            },
            {
              "title": "[ ] Project-independent technology, who can find \"entertainment\" together?"
            },
            {
              "title": "[ ] 1 to 1 Meetings</li>\n</ul><p><strong>2.Stakeholders</strong></p>"
            },
            {
              "title": "[ ] Learn about each stakeholder (Level 1). As a developer, most of the time there is no direct communication with stakeholders."
            },
            {
              "title": "[ ] Stay in communication with the stakeholders (Level 2). Proper communication can help the project to work better.</li>\n</ul><p><strong>3.Cross-team collaboration</strong></p>"
            },
            {
              "title": "[ ] What are the relevant partners and who are the respective interfaces?"
            },
            {
              "title": "[ ] Team in same project or organizations.</li>\n</ul><p><strong>4.Users</strong></p>"
            },
            {
              "title": "[ ] Who is the user? Are we in direct contact with them?"
            },
            {
              "title": "[ ] Feedback loop. How does a user's feedback become requirements?"
            }
          ]
        },
        {
          "topic": "Domain",
          "items": [
            {
              "title": "<p><strong>0.Business Vision</strong></p><p>Explanation: What are we doing, where are we going?</p><p><strong>1.Business</strong></p>"
            },
            {
              "title": "[ ] Is there a list of requirements that are close to full? At a certain time (such as iterations), the demand should be stable."
            },
            {
              "title": "[ ] How does demand go from verbal to to-do list? Is there an irregular problem in the middle?"
            },
            {
              "title": "[ ] How is the business changed?</li>\n</ul><p><strong>2.Cross-functional requirements</strong></p>"
            },
            {
              "title": "[ ] Operational quality. Quality observed during system operation, such as security and ease of use"
            },
            {
              "title": "[ ] Evolution quality. Software system structure and quality related to the development process, such as software testability, maintainability, scalability, scalability, etc."
            }
          ]
        }
      ]
    },
    {
      "topic": "中文（Chinese）",
      "items": [
        {
          "title": "<p>关注于四个维度：</p>"
        },
        {
          "title": "[ ] Process，关注于从权限管理、获取代码、部署上线、代码集成等的流程。"
        },
        {
          "title": "[ ] People，连接利益相关者、第三方合作伙伴（组织外）、协作团队（组织内）、团队成员等相关的人。"
        },
        {
          "title": "[ ] Tech，包含了技术远景、文档（文档即代码）、项目代码、技术栈、软件库管理等。"
        },
        {
          "title": "[ ] Business，涵盖了业务远景、业务需求、跨功能需求等业务相关功能的需求。"
        },
        {
          "topic": "Tech",
          "items": [
            {
              "title": "<p><strong>0. 技术远景</strong></p><p>说明：在技术上，我们有什么追求？</p><p><strong>1. 文档</strong>\n - Path to Production\n - 上线及发布日记\n - 项目相关的 wiki 和文档记录\n - 开发规范</p><p>说明：文档即代码——好的文档应该是版本管理的。</p><p><strong>2. 架构</strong>\n  - 系统相关的架构图，如 C4Model 方式描述\n  - 现有的技术栈及其关系</p><p><strong>3. 代码库</strong>\n - 搭建指南。即 <code>README</code>\n - 架构决策记录。放置在代码库的 <code>docs/adr</code> 目录中。\n - 编辑器配置和代码风格规范。\n - 模式和风格指南。\n - 分支管理模式。GitFlow 或者 master，或者 Feature Branch。\n - 代码提交风格。业务风格或者是开源软件风格？</p><p><strong>4. 测试</strong>\n - 测试策略。测试层级, 测试金字塔。\n - 自动化测试。</p><p><strong>5. 项目演进</strong>\n - 技术风险点。即需要提前 spike 调研的内容\n - 未来的技术栈\n - 系统的演进方案</p><p><strong>6. 安全</strong>\n - 安全标准。安全更重要，还是体验更重要？\n - 代码中的数据加密。\n - 代码安全。</p><p><strong>7. 质量</strong>\n - 项目质量跟踪。\n - 代码质量可视化。\n - 应用质量策略。</p>"
            }
          ]
        },
        {
          "topic": "Process",
          "items": [
            {
              "title": "<p><strong>0. Project Process</strong></p>"
            },
            {
              "title": "[ ] 项目的 Roadmap？项目 Deadline，关键时间节点，项目规划等。"
            },
            {
              "title": "[ ] 项目功能的生命周期。如敏捷中的故事卡工作流"
            },
            {
              "title": "[ ] 沟通方式？如 IM，邮件，还有敏捷的每日站会，远程会议，Retro 等</li>\n</ul><p><strong>1. Path to Development</strong></p>"
            },
            {
              "title": "[ ] 开发机申请及网络等权限准备"
            },
            {
              "title": "[ ] 代码库权限管理"
            },
            {
              "title": "[ ] 编辑器和相关的工具申请</li>\n</ul><p>说明：不同的的组织包含自身特别的情况，如 PC 端口、网络权限、代码库权限等的开通都需要一定的流程。</p><p><strong>2. Path to Production</strong></p>"
            },
            {
              "title": "[ ] 上线每一步的流程"
            },
            {
              "title": "[ ] 相关的关键人"
            },
            {
              "title": "[ ] 每一步所需要的工具"
            },
            {
              "title": "[ ] 每一步所需要的流程。如 QA 测试流程，上线流程<p>说明：代码中的 Path to Production 只是一份说明——针对于开发人员的，而这里的则需要一个更详细的说明。</p><p><strong>3. Path to Roll Off</strong></p><p>说明：换一个项目时，需要哪些东西？</p>"
            }
          ]
        },
        {
          "topic": "People",
          "items": [
            {
              "title": "<p><strong>1. 团队成员</strong></p>"
            },
            {
              "title": "[ ] 非技术问题找谁？"
            },
            {
              "title": "[ ] 团队成员的技术栈及水平"
            },
            {
              "title": "[ ] 每个人的技术水平，应该怎么带：Coach（教练式）, Pairing（结对式）, Teach（教学式）"
            },
            {
              "title": "[ ] 项目无关的技术，可以找谁一起“娱乐”？"
            },
            {
              "title": "[ ] 1 to 1 Meetings</li>\n</ul><p><strong>2. 利益相关者</strong></p>"
            },
            {
              "title": "[ ] 了解各个相关者（Level 1）。如作为一个开发人员，大部分时间并不会和利益相关者有直接的沟通。"
            },
            {
              "title": "[ ] 和相关者保持沟通（Level 2）。适当沟通，可以帮助项目更好地进行。</li>\n</ul><p><strong>3. 跨团队协作</strong></p>"
            },
            {
              "title": "[ ] 相关的合作方有哪些，各自的接口人是谁？"
            },
            {
              "title": "[ ] 同组织、项目下的其它团队。</li>\n</ul><p><strong>4. 用户</strong></p>"
            },
            {
              "title": "[ ] 用户是谁？我们是否与他们直接接触？"
            },
            {
              "title": "[ ] 反馈环。一个用户的反馈是如何变成需求的？"
            }
          ]
        },
        {
          "topic": "Business",
          "items": [
            {
              "title": "<p><strong>0. 业务远景</strong></p><p>说明：我们在做什么，我们要去哪里？</p><p><strong>1. 业务需求</strong></p>"
            },
            {
              "title": "[ ] 有没有接近全的需求列表。在一定的时间（如迭代内），需求应该是稳定的。"
            },
            {
              "title": "[ ] 需求是如何从口头到待办列表的？中间是不是存在不规范的问题"
            },
            {
              "title": "[ ] 业务是如何进行变更的？</li>\n</ul><p><strong>2. 跨功能需求</strong></p>"
            },
            {
              "title": "[ ] 运行质量。在系统运作时观察到的质量，例如保安性及易用性等"
            },
            {
              "title": "[ ] 演进质量。软件系统结构及开发过程有关的质量，例如软件可测试性、可维护性、可扩展性、可伸缩性（scalability）等"
            }
          ]
        }
      ]
    },
    {
      "topic": "License",
      "items": [
        {
          "title": "<p>Web based on <a href=\"https://github.com/thedaviddias/Front-End-Checklist\">https://github.com/thedaviddias/Front-End-Checklist</a> See <code>web/LICENSE</code> in this directory.</p><p><a href=\"http://ideas.phodal.com/\"><img alt=\"Phodal's Idea\" src=\"http://brand.phodal.com/shields/idea-small.svg\"/></a></p><p>© 2019 A <a href=\"https://www.phodal.com\">Phodal Huang</a>'s <a href=\"http://github.com/phodal/ideas\">Idea</a>.  This code is distributed under the MIT license. See <code>LICENSE</code> in this directory.</p>"
        }
      ]
    }
  ],
  "sourceUrl": "https://example.com"
}